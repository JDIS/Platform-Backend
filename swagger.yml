swagger: '2.0'
info:
  version: 1.0.0
  title: API for the JDIS training platform
basePath: /api
securityDefinitions:
  cookieAuth:
    type: apiKey
    in: header
    name: Cookie
paths:
  # CHALLENGES
  /challenges:
    get:
      summary: Get all challenges
      tags:
        - challenges
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Challenge"
    post:
      summary: Create a challenge
      tags:
        - challenges
      consumes:
        - application/json
      parameters:
        - in: body
          name: challenge
          description: The challenge to create
          schema:
            $ref: "#/definitions/Challenge"
      responses:
        404:
          description: Not found
        200:
          description: OK
          schema:
            $ref: "#/definitions/Challenge"
  /challenges/seed:
    post:
      summary: Seed the database with stored challenges
      tags:
        - seed
      responses:
        200:
          description: OK
  /challenges/{challengeId}:
    get:
      summary: Get a challenge by ID
      tags:
        - challenges
      parameters:
        - in: path
          name: challengeId
          type: string
          required: true
          description: ID of the challenge
      responses:
        404:
          description: Not found
        200:
          description: OK
          schema:
            $ref: "#/definitions/Challenge"
    put:
      summary: Update a challenge by ID
      tags:
        - challenges
      parameters:
        - in: path
          name: challengeId
          type: string
          required: true
          description: ID of the challenge to update
        - in: body
          name: challenge
          description: The new challenge data
          schema:
            $ref: "#/definitions/Challenge"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Challenge"
    delete:
      summary: Delete a challenge and tests by ID
      tags:
        - challenges
      parameters:
        - in: path
          name: challengeId
          type: string
          required: true
          description: ID of the challenge
      responses:
        200:
          description: OK
  /challenges/{challengeId}/tests:
    get:
      summary: Get tests for a challenge by ID
      tags:
        - challenges
      parameters:
        - in: path
          name: challengeId
          type: string
          required: true
          description: ID of the challenge
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Challenge"
    post:
      summary: Create tests for a challenge by ID
      tags:
        - challenges
      parameters:
        - in: path
          name: challengeId
          type: string
          required: true
          description: ID of the challenge
        - in: body
          name: tests
          description: The tests to create
          schema:
            type: array
            items:
              $ref: "#/definitions/Challenge"
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Challenge"
    put:
      summary: Update tests for a challenge by ID
      tags:
        - challenges
      parameters:
        - in: path
          name: challengeId
          type: string
          required: true
          description: ID of the challenge
        - in: body
          name: tests
          description: The tests to update
          schema:
            type: array
            items:
              $ref: "#/definitions/Challenge"
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Challenge"
  /challenges/{challengeId}/result:
    get:
      summary: Get result for challenge
      tags:
        - challenges
      parameters:
        - in: path
          name: challengeId
          type: string
          required: true
          description: ID of the challenge
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Challenge"
  # CATEGORIES
  /categories:
    get:
      summary: Get all categories
      tags:
        - categories
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Category"
  /categories/seed:
    post:
      summary: Seed the database with stored categories
      tags:
        - categories
        - seed
      responses:
        200:
          description: OK
  # LANGUAGES
  /languages:
    get:
      summary: Get supported languages
      tags:
        - languages
      parameters:
        - in: query
          name: challenge
          type: string
          description: ID of the challenge
      responses:
        404:
          description: Challenge not found
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Language"
  /languages/seed:
    post:
      summary: Seed the database with stored languages
      tags:
        - languages
        - seed
      responses:
        200:
          description: OK
  # USERS
  /users/me:
    get:
      summary: Get the current user
      tags:
        - users
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
  /users/:userId/makeadmin:
    post:
      summary: Make a user admin
      tags:
        - users
      parameters:
        - in: path
          name: userId
          type: string
          required: true
          description: ID of the user
      responses:
        404:
          description: Not found
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
  # RESULTS
  /results:
    get:
      summary: Get all results
      tags:
        - results
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Challenge"
  # CODES
  /codes:
    get:
      summary: Get codes for challenge
      tags:
        - codes
      parameters:
        - in: query
          name: challenge
          type: string
          description: ID of the challenge
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Code"
    post:
      summary: Save code
      tags:
        - codes
      parameters:
        - in: body
          name: code
          description: The code to save
          schema:
            $ref: "#/definitions/Code"
      responses:
        200:
          description: OK
  /codes/submit:
    post:
      summary: Run code
      tags:
          - codes
      parameters:
        - in: body
          name: code
          description: The code to run
          schema:
            $ref: "#/definitions/Code"
      responses:
          200:
            description: OK
definitions:
  Challenge:
    type: object
    properties:
      id:
        type: string
        readOnly: true
      name:
        type: string
      description:
        type: string
      points:
        type: integer
      category:
        type: string
      isCodingChallenge:
        type: boolean
      timeAllowed:
        type: integer
      languagesAllowed:
        type: array
        items:
          type: string
      boilerplates:
        type: array
        items:
          type: object
          properties:
            language:
              type: string
            code:
              type: string
  Test:
    type: object
    properties:
      id:
        type: string
        readOnly: true
      name:
        type: string
      challenge:
        type: string
      isPublic:
        type: boolean
      isCode:
        type: boolean
      inputs:
        type: array
        items:
          type: string
      outputs:
        type: array
        items:
          type: string
  Category:
    type: object
    properties:
      name:
        type: string
  User:
    type: object
    properties:
      id:
        type: string
        readOnly: true
      data:
        type: object
        properties:
          cip:
            type: string
          language:
            type: string
          email:
            type: string
          name:
            type: string
      meta:
        type: object
        properties:
          provider:
            type: string
          isAdmin:
            type: boolean
          created:
            type: string
  Result:
    type: object
    properties:
      id:
        type: string
        readOnly: true
      user:
        type: string
      challenge:
        type: string
      points:
        type: number
      percent:
        type: number
      tests:
        type: array
        items:
          type: object
          properties:
            test:
              type: string
            percent:
              type: number
            isSuccess:
              type: boolean
            isTimeout:
              type: boolean
            isCompilationError:
              type: boolean
  Language:
    type: object
    properties:
      id:
        type: string
        readOnly: true
      name:
        type: string
      bin: 
        type: string
      fileExtension:
        type: string
      dockerImage:
        type: string
      dockerCompiler: 
        type: string
      compiledPostfix: 
        type: string
      runPreArgs:
        type: array
        items:
          type: string
      interpreter:
        type: boolean
      highlight:
        type: string
  Code:
    type: object
    properties:
      id:
        type: string
        readOnly: true
      user:
        type: string
        readOnly: true
      challenge:
        type: string
      language:
        type: string
      code:
        type: string
